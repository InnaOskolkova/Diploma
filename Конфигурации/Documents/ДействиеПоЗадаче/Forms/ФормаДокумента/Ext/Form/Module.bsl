&НаКлиенте
Перем ТРЗпоСтатусамМодифицированность;

&НаКлиенте
Процедура История(Команда)
	
	ЗначениеОтбора = Новый Структура("Задача", Объект.Задача);
	П = Новый Структура("Отбор", ЗначениеОтбора);
	
	ОткрытьФорму("РегистрСведений.ИсторияЗадач.Форма.ФормаСписка",П);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьВидимость();
	ТРЗпоСтатусамМодифицированность = Ложь;
		
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если ТРЗпоСтатусамМодифицированность Тогда
		ДиалогСВопросом();
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтрокиНаСервере()
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗадачиСотрудников.Период КАК Период,
		|	ЗадачиСотрудников.ТипЗадачи КАК ТипЗадачи,
		|	ЗадачиСотрудников.Задача КАК Задача,
		|	ЗадачиСотрудников.Исполнитель КАК Исполнитель,
		|	ЗадачиСотрудников.Часы КАК Часы,
		|	ЗадачиСотрудников.ВыходнойОтпуск КАК ВыходнойОтпуск,
		|	ЗадачиСотрудников.Статус КАК Статус,
		|	ЗадачиСотрудников.Комментарий КАК Комментарий
		|ИЗ
		|	РегистрСведений.ЗадачиСотрудников КАК ЗадачиСотрудников
		|ГДЕ
		|	ЗадачиСотрудников.СсылкаНаДокумент = &СсылкаНаДокумент
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период";
	
	Запрос.УстановитьПараметр("СсылкаНаДокумент", Объект.Ссылка);
	//Запрос.УстановитьПараметр("Задача", Объект.Задача);
	//Запрос.УстановитьПараметр("Исполнитель", Объект.Исполнитель);	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		НоваяСтрока = Объект.ТРЗпоСтатусам.Добавить();
		НоваяСтрока.Период = ВыборкаДетальныеЗаписи.Период;
		НоваяСтрока.Задача = ВыборкаДетальныеЗаписи.Задача;
		НоваяСтрока.Сотрудник = ВыборкаДетальныеЗаписи.Исполнитель;
		НоваяСтрока.Часы = ВыборкаДетальныеЗаписи.Часы;
		
		НоваяСтрока.Статус = ВыборкаДетальныеЗаписи.Статус;
		НоваяСтрока.Комментарий = ВыборкаДетальныеЗаписи.Комментарий;

	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтроки(Команда)
	Объект.ТРЗпоСтатусам.Очистить();  
	ОбновитьСтрокиНаСервере();
	
	СотрудникРанее = Неопределено;
	ПериодРанее = Дата("00010101000000");
	ЧасыМесяц = 0;
	Для каждого Строка Из Объект.ТРЗпоСтатусам Цикл
		
		Сотрудник = Строка.Сотрудник;
		Период = Строка.Период;
		
		Часы = ТРЗпоСтатусамПериодПриИзмененииНаСервере(Строка.Период,Строка.Сотрудник);
		Строка.ВсегоЗанятоЧасовВДень = Часы;
		
		Если НЕ (Сотрудник = СотрудникРанее И НачалоМесяца(Период) = ПериодРанее) Тогда	
			ЧасыМесяц = ОбщиийМодульПроверка().ПроверкаТРЗМесяцНаСервере(Строка.Сотрудник,Строка.Период);			
			СотрудникРанее = Сотрудник;
			ПериодРанее = НачалоМесяца(Период); 
		КонецЕсли;
		
		Строка.ВсегоЗанятоЧасовВМесяц = ЧасыМесяц;
				
		Если Часы=0 					Тогда Статус = 1 
		ИначеЕсли Часы >0 И Часы < 8 	Тогда Статус = 4
		ИначеЕсли Часы = 8 				Тогда Статус = 5
		ИначеЕсли Часы >8 			 	Тогда Статус = 2		
		КонецЕсли; 
		Строка.СтатусЗанятостьВДень = Статус;
		
	КонецЦикла; 
	
	ЭтаФорма.Модифицированность = Истина;
	
	
КонецПроцедуры

&НаСервере
Функция ОбщиийМодульПроверка()
	Возврат ФункцииПроверки;
КонецФункции


&НаКлиенте
Процедура ОбновитьСтрокиНаКлиенте()
	Объект.ТРЗпоСтатусам.Очистить();  
	ОбновитьСтрокиНаСервере();
	
	СотрудникРанее = Неопределено;
	ПериодРанее = Дата("00010101000000");
	ЧасыМесяц = 0;
	Для каждого Строка Из Объект.ТРЗпоСтатусам Цикл
		
		Сотрудник = Строка.Сотрудник;
		Период = Строка.Период;
		
		Часы = ТРЗпоСтатусамПериодПриИзмененииНаСервере(Строка.Период,Строка.Сотрудник);
         		Строка.ВсегоЗанятоЧасовВДень = Часы;
		
		Если НЕ (Сотрудник = СотрудникРанее И НачалоМесяца(Период) = ПериодРанее) Тогда	
			ЧасыМесяц = ОбщиийМодульПроверка().ПроверкаТРЗМесяцНаСервере(Строка.Сотрудник,Строка.Период);			
			СотрудникРанее = Сотрудник;
			ПериодРанее = НачалоМесяца(Период); 
		КонецЕсли;
		
		Строка.ВсегоЗанятоЧасовВМесяц = ЧасыМесяц;
				
		Если Часы=0 					Тогда Статус = 1 
		ИначеЕсли Часы >0 И Часы < 8 	Тогда Статус = 4
		ИначеЕсли Часы = 8 				Тогда Статус = 5
		ИначеЕсли Часы >8 			 	Тогда Статус = 2		
		КонецЕсли; 
		Строка.СтатусЗанятостьВДень = Статус;
		
	КонецЦикла; 
	
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры


&НаСервере
Процедура ПеренестиДанныеВРегистрЗадачиСотрудниковНаСервере()
			
	Набор = РегистрыСведений.ЗадачиСотрудников.СоздатьНаборЗаписей();
	Набор.Отбор.СсылкаНаДокумент.Установить(Объект.Ссылка);
	Набор.Записать(Истина);
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДействиеПоЗадачеТРЗпоСтатусам.Период,
		|	ДействиеПоЗадачеТРЗпоСтатусам.Сотрудник,
		|	ДействиеПоЗадачеТРЗпоСтатусам.Часы,
		|	ДействиеПоЗадачеТРЗпоСтатусам.Статус,
		|	ДействиеПоЗадачеТРЗпоСтатусам.Комментарий
		|ИЗ
		|	Документ.ДействиеПоЗадаче.ТРЗпоСтатусам КАК ДействиеПоЗадачеТРЗпоСтатусам
		|ГДЕ
		|	ДействиеПоЗадачеТРЗпоСтатусам.Ссылка = &Ссылка";
		
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МенеджерЗаписи = РегистрыСведений.ЗадачиСотрудников.СоздатьМенеджерЗаписи(); 
		МенеджерЗаписи.ТипЗадачи = Объект.Задача.ТипЗадачи;  
		МенеджерЗаписи.Задача = Объект.Задача; 
		МенеджерЗаписи.Период = ВыборкаДетальныеЗаписи.Период; 
		МенеджерЗаписи.Исполнитель = ВыборкаДетальныеЗаписи.Сотрудник;
		МенеджерЗаписи.Часы = ВыборкаДетальныеЗаписи.Часы;
		МенеджерЗаписи.СсылкаНаДокумент = Объект.Ссылка;
		МенеджерЗаписи.Статус = ВыборкаДетальныеЗаписи.Статус;
		МенеджерЗаписи.Комментарий = ВыборкаДетальныеЗаписи.Комментарий;
		
		МенеджерЗаписи.Записать();
	КонецЦикла;
			
КонецПроцедуры

&НаКлиенте
 Процедура ПеренестиДанныеВРегистрЗадачиСотрудников(Команда)
	
	Если ЭтаФорма.Модифицированность Тогда
		
		ПоказатьПредупреждение(,"Предварительно необходимо записать документ");
		Возврат;
	
	КонецЕсли;
	
	// Проверка корректности заполнений дат табличной части "ТРЗпоСтатуса"
	МассивДат = Новый Массив;
	НекорректнаяЗапись = Ложь;
	Для Каждого Запись Из Объект.ТРЗпоСтатусам Цикл
		МассивДат.Добавить(Запись.Период);			
	КонецЦикла;
	Для Номер = 0 По МассивДат.Количество()-2 Цикл
		Если МассивДат[Номер] = МассивДат[Номер+1] Тогда
			Сообщить ("Перенос не выполнен. Некорректно введены данные в табличной части Распределение ТРЗ. Повторяется период занятости исполнителя");
			НекорректнаяЗапись = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если НекорректнаяЗапись Тогда
		Возврат;
	КонецЕсли;
	
	Отпуск = Ложь;
	
	Для каждого Строка Из Объект.ТРЗпоСтатусам Цикл
	
		Отпуск = ОбщиийМодульПроверка().ПроверкаОтпусков(Строка.Период, Строка.Сотрудник);	
		Выходной = ОбщиийМодульПроверка().ПроверкаГрафикаРаботы(Строка.Период, Строка.Сотрудник);
		
	КонецЦикла;           	
	
	Если Не Отпуск И Не Выходной Тогда
	      
		ПеренестиДанныеВРегистрЗадачиСотрудниковНаСервере();
		ОбновитьСтрокиНаКлиенте();
	
	КонецЕсли; 
			
КонецПроцедуры

&НаКлиенте
 Процедура ПеренестиДанныеВРегистрЗадачиСотрудниковНаКлиенте()
		
	// Проверка корректности заполнений дат табличной части "ТРЗпоСтатуса"
	МассивДат = Новый Массив;
	НекорректнаяЗапись = Ложь;
  	Для Каждого Запись Из Объект.ТРЗпоСтатусам Цикл
		МассивДат.Добавить(Запись.Период);			
	КонецЦикла;
	Для Номер = 0 По МассивДат.Количество()-2 Цикл
		Если МассивДат[Номер] = МассивДат[Номер+1] Тогда
			Сообщить ("Перенос не выполнен. Некорректно введены данные в табличной части Распределение ТРЗ. Повторяется период занятости исполнителя");
			НекорректнаяЗапись = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если НекорректнаяЗапись Тогда
		Возврат;
	КонецЕсли;
	
	Отпуск = Ложь;
	
	Для каждого Строка Из Объект.ТРЗпоСтатусам Цикл
	
		Отпуск = ОбщиийМодульПроверка().ПроверкаОтпусков(Строка.Период, Строка.Сотрудник);	
		Выходной = ОбщиийМодульПроверка().ПроверкаГрафикаРаботы(Строка.Период, Строка.Сотрудник);
		
	КонецЦикла;           	
	
	Если Не Отпуск И Не Выходной Тогда
	
		ПеренестиДанныеВРегистрЗадачиСотрудниковНаСервере();
		ОбновитьСтрокиНаКлиенте();				
				
	КонецЕсли;  
			
КонецПроцедуры

&НаСервере
Функция ТРЗпоСтатусамПериодПриИзмененииНаСервере(Период,Исполнитель)
	    			
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(ЗадачиСотрудников.Часы)
		|ИЗ
		|	РегистрСведений.ЗадачиСотрудников КАК ЗадачиСотрудников
		|ГДЕ
		|	ЗадачиСотрудников.Исполнитель = &Исполнитель
		|	И ЗадачиСотрудников.Период = &Период";
	
	Запрос.УстановитьПараметр("Исполнитель", Исполнитель);
	Запрос.УстановитьПараметр("Период", Период);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Часы = 0;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Часы = ВыборкаДетальныеЗаписи.Часы;
	КонецЦикла;
	    	
	Возврат Часы;
	
КонецФункции

&НаКлиенте
Процедура ТРЗпоСтатусамПериодПриИзменении(Элемент)
	
	Период = Дата(Элемент.ТекстРедактирования+ " 00:00:00");
	Исполнитель = ЭтаФорма.ТекущийЭлемент.ТекущиеДанные.Сотрудник;
	ВсегоЗанятоЧасовВДень = ТРЗпоСтатусамПериодПриИзмененииНаСервере(Период,Исполнитель);
	ЭтаФорма.ТекущийЭлемент.ТекущиеДанные.ВсегоЗанятоЧасовВДень = ВсегоЗанятоЧасовВДень;
	
КонецПроцедуры

//Видимость
&НаКлиенте 
Процедура УстановитьВидимость()
	
	СтатусПриИзмененииНаСервере();
	ИнтеграцияПриИзмененииНаСервере();
			  		   
КонецПроцедуры	


//События на изменения элементов
&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	
	СтатусПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СтатусПриИзмененииНаСервере()
		
	Если Объект.Статус = Справочники.Статусы.НайтиПоНаименованию("В работе") Тогда
		Элементы.ЭтапыРеализации.Видимость = Истина;	
		ДатаРелизаПриИзмененииНаСервере();
	Иначе
		Элементы.ЭтапыРеализации.Видимость = Ложь;	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаРелизаПриИзменении(Элемент)
	
	ДатаРелизаПриИзмененииНаСервере();

КонецПроцедуры

&НаСервере
Процедура ДатаРелизаПриИзмененииНаСервере()
	
	Если НЕ Объект.ДатаРелиза = Дата("00010101000000") Тогда	
		
		Элементы.Тестирование.Заголовок = "Тестирование "+Строка(Формат(Объект.ДатаРелиза+Справочники.ПредопределенныеЭлементы.Тестирование.Значение*86400,"ДЛФ=ДД"));
		Элементы.Согласования.Заголовок = "Согласования "+Строка(Формат(Объект.ДатаРелиза+Справочники.ПредопределенныеЭлементы.Согласования.Значение*86400,"ДЛФ=ДД"));
		Элементы.ПереносВРелиз.Заголовок = "Перенос в релиз "+Строка(Формат(Объект.ДатаРелиза+Справочники.ПредопределенныеЭлементы.Релиз.Значение*86400,"ДЛФ=ДД"));
		Элементы.Настройка.Заголовок = "Настройка "+Строка(Формат(Объект.ДатаРелиза+Справочники.ПредопределенныеЭлементы.Настройка.Значение*86400,"ДЛФ=ДД"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнтеграцияПриИзменении(Элемент)
	
	ИнтеграцияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ИнтеграцияПриИзмененииНаСервере()
	
	Элементы.ИнтеграцияНадпись.Заголовок = ?(Объект.Интеграция,"Учитывать трудозатраты смежников","");
	
КонецПроцедуры

&НаКлиенте
Процедура ТРЗпоСтатусамПриИзменении(Элемент)
	ТРЗпоСтатусамМодифицированность = Истина;
КонецПроцедуры


&НаКлиенте
Процедура ДиалогСВопросом()
 
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопроса", ЭтотОбъект);	
	
	ПоказатьВопрос(Оповещение, 
					"Изменённые данные табличной части Распределение ТРЗ не были перенесены в регистр и обновлены. Выполнить перенос и обновление?", 
					РежимДиалогаВопрос.ДаНет, 0, 
					КодВозвратаДиалога.Да, "");    
	
КонецПроцедуры
 
&НаКлиенте
Процедура ПослеЗакрытияВопроса(Результат, Параметры) Экспорт
 
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПеренестиДанныеВРегистрЗадачиСотрудниковНаКлиенте();
		ТРЗпоСтатусамМодифицированность = Ложь;
		ЭтотОбъект.Записать();
		ЭтотОбъект.Закрыть();
    КонецЕсли;	
 
КонецПроцедуры


